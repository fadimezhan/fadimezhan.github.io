<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blog | Fadime Özhan]]></title>
  <link href="http://fadimezhan.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://fadimezhan.github.io/"/>
  <updated>2017-02-09T14:54:57+03:00</updated>
  <id>http://fadimezhan.github.io/</id>
  <author>
    <name><![CDATA[Fadime Özhan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Baska Bilgisayara Octopress Yapılandırması]]></title>
    <link href="http://fadimezhan.github.io/blog/2017/02/06/baska-bilgisayara-octopress-yapilandirmasi/"/>
    <updated>2017-02-06T17:21:15+03:00</updated>
    <id>http://fadimezhan.github.io/blog/2017/02/06/baska-bilgisayara-octopress-yapilandirmasi</id>
    <content type="html"><![CDATA[<p>Birden fazla bilgisayar kullananlar veya bilgisayarına format atanlar
için octopressi yeniden yapılandırmayı göstereceğim.</p>

<p>Octopress reposunda iki dal bulunur; master ve source. Source kısmı blog
yazılarımızı oluşturduğumuz dal, master kısmı ise tüm bloğu barındıran
daldır. Kurulum aşamasında master dalındaki dosyalar <code>_deploy</code> klasörü içinde oluşturulur. Alt çizgi içermesinin sebebi ise diğer dalları push ettiğinizde alt çizgi bulunan dosyaları çekmez. Böylece <code>rake deploy</code> komutunuzla master dalınız güncellenir.</p>

<!-- More -->


<p>öncelikle github sayfasından repomuzun url adresini kopyalıyoruz ve
 terminale geçiyoruz:</p>

<pre><code class="sh">$ git clone -b source git@github.com:username/username.github.io.git octopress
</code></pre>

<p>Source dalımızdaki dosyaları bilgisayarımıza octopress klasörü içinde kopyaladı.Şimdi octopress dizinine geçip master dalımızdaki dosyaları _deploy dizini içine klonluyoruz:</p>

<pre><code class="sh">$ cd octopress
$ git clone git@github.com:username/username.github.io.git _deploy
</code></pre>

<p>Şimdi dosyalarımızı yapılandırmak için gerekli komutları yazalım:</p>

<pre><code class="sh">$ gem install bundler
$ rbenv rehash
$ bundle install
$ rake setup_github_pages
</code></pre>

<p>Son komuttan sonra url adresi isterse, github sayfasından kopyaladığımız repo url adresini yapıştırıyoruz.</p>

<p>Artık diğer bilgisayarınızdaki octopress bloğunuzun local kopyası oluştu. Eğer birden fazla bilgisayardan blog yazmak istiyorsanız pull-push işlemlerine dikkat etmeniz gerekecektir.</p>

<p>Blog yazınızı oluşturduğunuz bilgisayarda:</p>

<pre><code class="sh">$ rake generate
$ git add .
$ git commit -am “Configuration for another computer.”
$ git push origin source  # source dalının (remote) güncellenmesi
$ rake deploy             # master dalının (remote) güncellenmesi
</code></pre>

<p>Daha sonra başka bilgisayarda son değişiklikleri bilgisayarınınza çekmeniz gerkecek:
<code>sh
$ cd octopress
$ git pull origin source  # source dalının (remote) güncellenmesi
$ cd ./_deploy
$ git pull origin master  # master dalının (remote) güncellenmesi
</code></p>

<h3>Şimdi bloğumuza biraz içerik ekleyelim.</h3>

<p>Yeni blog yazısı oluşturmak için ;
<code>sh
$ rake new_post[“title”]
</code>
blog yazıları <code>source/_posts</code> dizini altında depolanır.
 Yukarıdaki komutla jekyll isimlendirmesine göre, YYYY-MM-DD-post-title.markdown dosyası oluşturulur ve text editörde açtığınızda yaml frontmatter kod bloğunu görürsünüz. Bu kod bloğu sayfaların ve postların nasıl işleneceğini söyler.</p>

<p>Yeni sayfa oluşturmak için ;
<code>sh
$ rake new_page[super-awesome]  # /source/super-awesome/index.markdown  dosyası oluşturur.
</code>
ya da;</p>

<pre><code class="sh">$ rake new_page[super-awesome/page.html]  # /source/super-awesome/page.html  dosyası oluşturur.
</code></pre>

<p>bazı komutlar ;</p>

<pre><code class="sh">$ rake generate   # postları ve sayfaları public dizini içinde oluşturur.
$ rake watch      # değişiklikler için source/ ve sass/  dizinlerini izler
$ rake preview    # izler ve  http://localhost:4000  adresindeki web server’a bağlar
</code></pre>

<p> Eğer postlarınızda yayınlamadan çalışmak istiyorsanız <code>published: false</code> kodunu yaml frontmatter kısmına ekleyin. Localhostunuzda <code>rake preview</code> komutuyla izleyebilirsiniz ama bu postunuz <code>rake genereate</code> yaptığınızda yayınlanmayacaktır.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails]]></title>
    <link href="http://fadimezhan.github.io/blog/2017/02/06/ruby-on-rails/"/>
    <updated>2017-02-06T16:53:45+03:00</updated>
    <id>http://fadimezhan.github.io/blog/2017/02/06/ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Ruby on Rails, Ruby dilinde yazılmış, açık kaynak kodlu ve web uygulaması
geliştirmek için gereken tüm bileşenlere sahip frameworktür. İki tane felsefeyi esas alır;</p>

<ul>
<li><strong>Don&rsquo;t repeat yourself(DRY):</strong> Aynı işlemi yapan kodları tekrarlamayı
  en aza indirmeyi savunur. Örneğin partial işlemi ile belli bir işi yapan
 kod parçası farklı yerlerde kullanılabilir.</li>
<li><strong>Convention over configuration(COC):</strong> Uygulama hazırlanırken sürekli yapılan rutin işleri, ruby on rails frameworkü tarafından daha kolay ve hızlı oluşturur.</li>
</ul>


<p>Ruby on Rails MVC(Model,View,Controller) mimarisini kullanır.</p>

<ul>
<li><strong>Model:</strong> Veritabanı ile ilişkiyi sağlar.Tüm verileri bulundurur.</li>
<li><strong>Controller:</strong> Kullanıcının isteklerine göre işlemleri yapar ve modelden gelen verileri işler.</li>
<li><strong>View:</strong> Kullanıcının görüntüleyeceği arayüzü içerir.</li>
</ul>


<p>Şimdi proje oluşturma işlemlerine bakalım:</p>

<!-- More -->


<pre><code>$ rails new blog      //blog isimli proje oluşturur.
$ bundle install      //içindeki gemlleri yükler ya da günceller.
$ cd blod             //oluşturulan klasörün içine girer.
$ rails server        //serverı açar.
</code></pre>

<p>Son komutla <a href="http://localhost:3000">http://localhost:3000</a> adresinde serverı açar ve sizi sabit welcome sayfası karşılar.</p>

<pre><code>$rails generate controller welcome index
</code></pre>

<p>Burada welcome isminde controller ve index isminde action(olay) oluşturuyoruz.  <strong>app/views/welcome/index.html.erb</strong> sayfası içindeki kodlar kullanıcının görüntüleyeceği kodları içeriyor.Bu içeriği şöyle değiştirelim.</p>

<p>```</p>

<h1>Hello,Rails</h1>


<pre><code>
 localhostu açtığımızda hala aynı sayfa bizi karşılıyor. Bu yüzden **config/routes.rb** içinden  #root 'welcome#index' kısmının başındaki # işareti kaldırıp, tekrar localimizi açalım. Artık yazdığımız html sayfası görüntüleniyor.

Şimdiye kadar controller,action ve view oluşturmayı öğrendik.

Artık blogumuza biraz içerik katalım.Bunun için resource oluşturuyouz. Bununla oluşturma,yoketme, güncelleme,okuma gibi kısımlar ekleniyor.
**config/routes.rb** sayfasına kodumuzu ekleyelim.
</code></pre>

<p>get &lsquo;welcome/index&rsquo;
resources :articles
root &lsquo;welcome#index&rsquo;
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;a href="http://localhost:3000/articles/new"&gt;http://localhost:3000/articles/new&lt;/a&gt;  sayfası oluşturuldu ama routing hatası veriyor. Controller oluşturulması gerekiyor.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;$ bin/rails generate controller articles
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Şimdide bilinmeyen action hatası veriyor. Bunun için &lt;strong&gt;app/controllers/articles_controller.rb&lt;/strong&gt; sayfasına kodlarımızı ekleyelim.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;class ArticlesController &lt; ApplicationController
</span><span class='line'>  def new
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;strong&gt;app/views/articles/new.html.erb&lt;/strong&gt; sayfasını oluşturup içine kodlarımızı yazalım.</span></code></pre></td></tr></table></div></figure></p>

<h1>New Article</h1>


<p>```
Artık <a href="http://localhost:3000/articles/new">http://localhost:3000/articles/new</a> adresinde görüntüleyebiliriz.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Komutları]]></title>
    <link href="http://fadimezhan.github.io/blog/2017/02/06/octopress-komutlari/"/>
    <updated>2017-02-06T11:53:07+03:00</updated>
    <id>http://fadimezhan.github.io/blog/2017/02/06/octopress-komutlari</id>
    <content type="html"><![CDATA[<p>Octopress ile blog yazmak için komutları aşağıdaki gibi uygulamınız gerekiyor.</p>

<h3>Temada değişiklik yapmak için;</h3>

<pre><code class="sh ..."> rake preview #komutuyla https://localhost:4000 sayfasında yapılan değişiklikler kontrol edilebilir.Değişiklikler henüz görüntülenmemişse server yeniden açılmalıdır.
</code></pre>

<!-- More -->


<h3>Yapılan degişiklikleri web sayfasında yayınlamak için;</h3>

<pre><code class="sh ..."> git add .
 git commit -m "message"
 git push origin source
 rake generate
 rake deploy
</code></pre>

<h3>Post yayınlamak için;</h3>

<pre><code class="sh ..."> rake new_post["title"]    // source/_posts
</code></pre>

<p>ya da;
<code>sh ...
 rake new_page[Web/page.html] // source/Web/page.html
</code>
<code>sh ...
 git add .
 git commit -m "message"
 git push origin source
 rake generate
 rake deploy
</code></p>
]]></content>
  </entry>
  
</feed>
